
Адекватный мануал: 
http://stepansuvorov.com/blog/2012/11/ репликация-mongodb-быстрая-настройка/

еще несколько мануалов: 
https://habr.com/post/335772/
https://ergoz.ru/kak-nastroit-replikatsiyu-v-mongodb/

Самый подробный мануал:
https://kamaok.org.ua/?p=2703

!!!!!!!!!Для разрешения на Seconf node читать файлы, нужно на них виполниить команду:
rs.slaveOk(true)
или
db.getMongo().setSlaveOk() 

!!!!!!!!!Для выбора или создани БД:
use [name]

---------------------------------------------------------------------------------------------------------
1) Создаём ноды
mongod --replSet rs0 --dbpath node1 --logpath node1\log --bind_ip localhost --port 1001
mongod --replSet rs0 --dbpath node2 --logpath node2\log --bind_ip localhost --port 1002
mongod --replSet rs0 --dbpath node3 --logpath node3\log --bind_ip localhost --port 1003

---------------------------------------------------------------------------------------------------------
2) Добавляем на первой надео (Primary) Остальніе (Secondary)
rs.add( { host: "127.0.0.1:1002", priority: 1, votes: 1 } )
rs.add( { host: "127.0.0.1:1003", priority: 1, votes: 1 } )

---------------------------------------------------------------------------------------------------------
3) В других консолях подключаемся:
mongo --port 1001
mongo --port 1002
mongo --port 1003

---------------------------------------------------------------------------------------------------------
4) В глдавном сервере (на порту 1001) иницилизировать себя как Primary и добавить остальные ноды:
rs.initiate()
rs.add( { host: "mongo1.example.com:27017", priority: 1, votes: 1 } )
rs.add( { host: "mongo2.example.com:27017", priority: 1, votes: 1 } )

---------------------------------------------------------------------------------------------------------
5) Просмотреть статус и просмотреть конфиг
rs.status() 
rs.conf()

---------------------------------------------------------------------------------------------------------
6) Продемонстрировать запись данных на primary node с разными Write Concern Levels (http://docs.mongodb.org/manual/core/write-concern/):
	Unacknowledged
	Acknowledged
	Journaled
	Replica Acknowledged (http://docs.mongodb.org/manual/core/replica-set-write-concern/)

db.items.insert(
   { item: "qweqwe", qty : 1022, type: "Clasp1" },
   { writeConcern: { w: 3, j:true, wtimeout: 5000 } }
)


w: 1 - запрашивать потверждения (дефолт)
w: 0 - не запрашивать потверждение
w: 3 - потребуется подтверждение от основного и обоих вторичных 
w [] - (знвчение указівает от скольких нод требовать подтверждение)
w majority - запрашивает подтверждение от большенства ("majority"Писать озабоченность требует подтверждения от 
двух из трех членов, в частности, основного и одного дополнительного. Если впоследствии вы масштабируете реплику, 
установленную на 5 членов, несущих данные, "majority"потребуется подтверждение от трех из пяти участников) 

wtimeout - время после которого если невіполнилась опреация будет возращена ошибка

j - Опция запрашивает подтверждение от MongoDB , что операция записи была записана в журнал на диске .

---------------------------------------------------------------------------------------------------------
7) Продемонстрировать два Read Preference Modes: чтение с primary и secondary node (http://docs.mongodb.org/manual/core/read-preference/)

db.products.find().readPref('nearest', [ { 'dc': 'east' } ])
db.products.find().readPref('primaryPreferred')

Режим чтения предпочтений	Описание
primary	- 				Режим по умолчанию. Все операции чтения из текущей реплики установлены первичными .
						Многодокументные транзакции , содержащие операции чтения, должны использовать предпочтения чтения primary.	
						Все операции в данной транзакции должны направляться одному и тому же участнику.
primaryPreferred -		В большинстве случаев операции читаются с основного, но если он недоступен, операции читаются с дополнительных членов.
secondary - 			Все операции читаются из вторичных членов набора реплик.
secondaryPreferred - 	В большинстве случаев операции читаются из вторичных членов, но если вторичные члены недоступны, операции читаются из первичных .
nearest	- 				Операции считываются из члена набора реплик с наименьшей задержкой в ​​сети, независимо от типа участника.


По умолчанию приложение направляет свои операции чтения первичному члену в наборе реплик .

Будьте внимательны при указании предпочтений чтения: режимы, отличные от тех, которые primaryмогут возвращать 
устаревшие данные, поскольку при асинхронной репликации данные в дополнительном устройстве могут не отражать 
самые последние операции записи.

---------------------------------------------------------------------------------------------------------
8)
????????????????????????????????????????????????????
ПК 2:
СУПЕРМЕГАВАЖЛИВИЙ момент - за 5 секунд треба встигнути виконати команду insert на PRIMARY node, коли вже 2 інші компи зупинили процес mongod
db.items.insert({"category": "RADIO", "model": "qwe", "producer": "Sony", "price": 450})
db.items.insert({"category": "TabletPC", "model": "ThinkPad N320", "producer": "Lenovo", "price": 750})
(один з двох інсертів на вибір)

db.items.insert({"category": "Phone", "model": "Red 690", "producer": "Apple", "price": 470})
db.items.find().readConcern("linearizable").count()
Цей інсерт пройде, приблизно через 3-10 секунд нода стане SECONDARY(тоді вже інсерти працювати не будуть)

Виконати наступні 3 команди:
db.getMongo().setSlaveOk()
use items
db.items.find().readConcern("majority")
????????????????????????????????????????????????????

---------------------------------------------------------------------------------------------------------
9) Воспользуйтесь всеми уровнями readConcern: { level: <"majority"|"local"|"linearizable"> }
!Read Concern(majority виводить коректні дані, local - всі, linearizable - хз)
db.products.find().readConcern("majority")
db.products.find().readConcern("majority").readPref('nearest', [ { 'dc': 'east' } ])

---------------------------------------------------------------------------------------------------------
10) Продемонстировать перевыбор primary node в случае выхода из строя текущей primary (Replica Set Elections)
http://docs.mongodb.org/manual/core/replica-set-elections/  

---------------------------------------------------------------------------------------------------------
11) Сэмулируйте eventual consistency с помощью установки задержки репликации для реплики 
https://docs.mongodb.com/manual/tutorial/configure-a-delayed-replica-set-member/
cfg = rs.conf()
cfg.members[0].priority = 0
cfg.members[0].hidden = true
cfg.members[0].slaveDelay = 3600
rs.reconfig(cfg)



Дополнительно
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
Полезные команды Репликация/Replica Set в MongoDB

Для просмотра существующих команд по реликации
rs.[TAB]

Просмотр конфигурации репликации
rs.conf()

Просмотр состояния репликации
rs.status()

Просмотр членов репликации
rs.status()['members']

Отчет о состоянии репликации с точки зрения Primary-сервера
rs0:PRIMARY> rs.printReplicationInfo()

Отчет о состоянии репликации с точки зрения Secondary-сервера
rs0:SECONDARY> rs.printSlaveReplicationInfo()

Проверка,выступает ли нода мастером репликации
rs.isMaster()['ismaster']

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
Принудительный перевод роли мастера между нодами, например, перевести роль мастера с 1-й ноды на 3-ю ноду
(В конце сайта):
https://kamaok.org.ua/?p=2703


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Задания от Радионова:

1)



